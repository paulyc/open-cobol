@comment *********************************************************************
@comment ** A. Glossary of Terms                                            **
@comment *********************************************************************
@newappendix{A,Glossary of Terms}
@table @asis
@p @item @define{Alphabetic Data Item}
@p A data item whose @syntax{PICTURE} clause allows it to contain only upper- and/or lower-case letters.  @xref{PICTURE}.
@p @item @define{Alphanumeric Data Item}
@p A data item whose @syntax{PICTURE} clause allows it to contain absolutely any character whatsoever.  @xref{PICTURE}.  Group items (@pxref{Structured Data}) are also implicitly considered to be alphanumeric data items.
@p @item @define{Alphanumeric Literal}
@p A string of characters enclosed within a pair of quotation marks (") or apostrophes (').  @xref{Alphanumeric Literals}.
@p @item @define{Called Program}
@p Another way to refer to a subprogram.  Note that a called program may also be a calling program.
@p @item @define{Calling Program}
@p A program that executes a subprogram.  Note that a calling program may also be a called program.
@p @item @define{Collating Sequence}
@p The sequence in which the characters that are acceptable to a computer are ordered for purposes of all types of sorting, merging, comparing, and processing.  GnuCOBOL programs may utilize standard character-set collating sequences (such as that defined by the ASCII or EBCDIC character sets) or programmer-defined custom sequences as specified in the OBJECT-COMPUTER paragraph (section 4.1.2) and defined in the SPECIAL-NAMES paragraph (section 4.1.4).
@p @item @define{Compilation Group}
@p The collection of all compilation units being compiled by a single execution of the GnuCOBOL compiler.
@p @item @define{Compilation Unit}
@p A single source file being compiled by the GnuCOBOL compiler.  A compilation unit may contain one or more programs.
@p @item @define{Control Break}
@p An event that is triggered when a control field on an RWCS-generated report changes value.  It is these events that trigger the generation of control heading and control footing groups.
@p @item @define{Control Field}
@p A field of data being presented within a detail group; as the various detail groups that comprise the report are presented, they are presumed to appear in sorted sequence of the control fields contained within them.  As an example, a department-by-department sales report for a chain of stores would probably be sorted by store number and -- within like store numbers -- be further sorted by department number.  The store number will undoubtedly serve as a control field for the report, allowing control heading groups to be presented before each sequence of detail groups for the same store and control footing groups to be presented after each such sequence.
@p @item @define{Control Footing}
@p A report group that appears immediately after one or more detail groups of an RWCS-generated report.  Such are produced automatically as a result of a control break.  This type of group typically serves as a summary of the detail group(s) that precede it, as might be the case on a sales report for a chain of stores, where the detail groups documenting sales for each department (one department per detail group) from the same store might be followed by a control footing that provides a summation of the department-by-department sales for that store.
@p @item @define{Control Heading}
@p A report group that appears immediately before one or more detail groups of an RWCS-generated report.  Such are produced automatically as a result of a control break.  This type of group typically serves as an introduction to the detail group(s) that follow, as might be the case on a sales report for a chain of stores, where the detail groups documenting sales for each department (one department per detail group) from the same store might be preceded by a control heading that states the full name and location of the store.
@p @item @define{Control Hierarchy}
@p The natural hierarchy of control breaks within a RWCS-controlled report based upon the manner in which the data the report is being generated from is sorted.
@p @item @define{Copybook}
@p A segment of program code that may be utilized by multiple programs simply by having that program use the COPY statement to import that code into the program.  Although similar to the "include" facility present in many other programming languages, the COBOL copybook mechanism is actually considerably more powerful.  @xref{Copybooks}, for a general discussion.  @xref{COPY}, for the specifics of the COPY statement.
@p @item @define{Data Item}
@p A contiguous area of storage within the memory space of a program that may be referenced, by name, in a COBOL program.  Other programming languages use the term variable, property or attribute to describe the same concept.  @xref{Structured Data}.
@p @item @define{Detail Group}
@p A report group that contains the detailed data being presented for the report.
@p @item @define{Detail Report}
@p An RWCS-generated report to which at least one type of detail group is presented.
@p @item @define{Division}
@p A collection of zero, one, or more sections of paragraphs, called the division body, that are formed and combined in accordance with a specific set of rules.  Each division consists of the division header and the related division body.  There are four divisions in a GnuCOBOL program: Identification, Environment, Data, and Procedure (coded in that sequence).  @xref{Program Structure}.
@p @item @define{Dynamic Subprogram}
@p A subprogram whose executable object code is contained in a different executable file as its calling program.  Dynamic subprograms are therefore loaded into memory as needed.
@p @item @define{Elementary Item}
@p A data item that isn't itself comprised of other data items.  @xref{Structured Data}.
@p @item @define{Entry-point}
@p A spot in the procedure division where a program may begin execution when it is executed from the operating system, invoked as a user-defined function or called by another program.
@p Every program has at least one entry-point --- known as the primary entry-point --- which corresponds to the first executable statement in the procedure division following the declaratives area, if any.
@p Additional entry-points may be defined via the @statementref{ENTRY}.
@p @item @define{Entry-point Name}
@p Every entry-point has a name.  That name must be unique for all programs that comprise an executable program.  Entry-point names are defined using a subroutine's @syntax{PROGRAM-ID} paragraph, a user-defined function's @syntax{FUNCTION-ID} paragraph or via @syntaxref{ENTRY} statements coded in a subprogram's procedure division.
@p @item @define{Executable File}
@p The GnuCOBOL compiler can create operating-system appropriate files that may be executed directly from the operating system environment.  On Windows systems, these will be ".exe" files whereas on UNIX systems they will have no specific extensions.  The compiler's @switchidx{-x} is used to create executable files.  Only main programs should be compiled in this manner.
@p @item @define{Execution Thread}
@p The complete set of executable code that is run during the execution of a program.  This includes the main program as well as all executed subprograms, including those that are both dynamically and statically loaded.
@p @item @define{Figurative Constants}
@p GnuCOBOL, like other COBOL implementations, supports a number of reserved words that may be used to represent a specific literal value.  These are known as figurative constants.  @xref{Figurative Constants}, for more information.
@p @item @define{Fixed Format Mode}
@p A mode of the GnuCOBOL compiler's operation where source statements are constrained to meeting the pre-2002 standard of limiting COBOL statements to 80 columns, with various columns having limitations as to what sort of COBOL syntax could be specified in them.  @xref{Format of Program Source Lines}, for more information.
@p @item @define{Free Format Mode}
@p A mode of the GnuCOBOL compiler's operation where source statements are allowed to be as long as 255 characters, with no restrictions or requirements as to in which columns various syntax elements must appear.  @xref{Format of Program Source Lines}, for more information.
@p @item @define{Group Item}
@p A hierarchical data structure where the group item --- itself a data item --- actually consists of two or more other contiguously allocated data items.  For example, 'Employee-Name' could be a 35-character data item consisting of a 20-character 'Last-Name' data item followed by a 14-character 'First-Name' and a 1-character 'Middle-Initial'.  @xref{Structured Data}.
@p @item @define{Hexadecimal Alphanumeric Literal}
@p These are alphanumeric literals whose character sequence is specified by hexadecimal value.  These literals are formed by a quote- or apostrophe-delimited sequence of an even number of hexadecimal digits (upper- or lower-case), prefixed with the letter "X" (also upper- or lower-case).  For example, the character string "Demo" could be specified as the hexadecimal alphanumeric literal @syntax{X'44656D6F'}, assuming the ASCII character set.  @xref{Alphanumeric Literals}.
@p @item @define{Hexadecimal Numeric Literal}
@p A numeric literal whose value is specified by hexadecimal value.  These literals are formed by a quote- or apostrophe-delimited sequence of from 1 to 16 hexadecimal digits (upper- or lower-case), prefixed with the letter "H" (also upper- or lower-case).  For example, the number 123456 could be specified as the hexadecimal numeric literal @syntax{H'01E240'}.  @xref{Numeric Literals}.
@p @item @define{Identifiers}
@p These are data items a COBOL program will be working with.  The vast majority of identifiers are defined by the user (programmer) while a few are pre-defined by the GnuCOBOL compiler.  Identifiers pre-defined by the compiler are referred to as special registers.  Other programming languages generally refer to identifiers as "variables".
@p @item @define{Imperative Statement}
@p @anchor{Imperative Statement}Either a statement that begins with a non decision-making verb and specifies an unconditional action to be taken or a conditional verb such as @syntax{IF} or @syntax{EVALUATE}, delimited by its explicit scope terminator (such as @syntax{END-IF} or @syntax{END-EVALUATE}).  An imperative statement can consist of a sequence of imperative statements.
@p @item @define{Intrinsic Function}
@p A built-in routine that accepts arguments and returns a value; syntactically, these may be used most places where GnuCOBOL identifiers are valid.  @xref{Intrinsic Functions}, for documentation on all the GnuCOBOL intrinsic functions.
@p @item @define{Level Number}
@p A 1- or 2-digit number that indicates the hierarchical position of a data item in a group item or the special properties of a data description entry.
@p Level numbers in the range 1 through 49 indicate the position of a data item in the hierarchical structure of a logical record.   Level numbers in the range 1 through 9 can be written either as a single digit or as a zero followed by the significant digit.
@p Level numbers 66, 77, 78 and 88 identify special properties of a data description entry.
@p @item @define{Literal}
@p A generic term used for a constant value coded in a program that may be either a numeric literal or an alphanumeric literal.
@p @item @define{Main program}
@p A program that is executed directly from an operating system or shell event.  Main programs are not executed from other programs (i.e. they are not called programs).
@p @item @define{National Character set}
@p A character set that supports symbols using other than the traditional Roman alphabet symbols used by the ASCII character set.  Typically, such a character set uses a UTF-16 (i.e. 16 bits-per-character) encoding of the Unicode character set.
@p Support for national character sets in GnuCOBOL is currently only partially implemented, and the compile- and run-time effect of using the @syntax{N} symbol in a @syntaxref{PICTURE} clause to define a field as containing national characters is the same as if @syntax{X(2)} had been coded, with the additional effect that such a field will qualify as a @syntax{NATIONAL} or @syntax{NATIONAL-EDITED} field on an @syntaxref{INITIALIZE} statement.
@p @item @define{Numeric Data Item}
@p A data item whose @syntax{PICTURE} clause allows it to contain only the numeric digit characters @syntax{0}-@syntax{9} (signed or unsigned), or a data item whose @syntax{PICTURE}/@syntax{USAGE} combination allow it to contain actual binary numbers in integer, fixed-point, floating-point or packed-decimal format.  Numeric data items are the only ones that may be used as table subscripts or as source arguments on arithmetic statements.  @syntaxref{PICTURE}, or @syntaxref{USAGE}.
@p @item @define{Numeric Edited Data Item}
@p An otherwise numeric data item whose @syntaxref{PICTURE} clause also contains any of the editing symbols @syntax{$}, @syntax{*}, @syntax{+}, @syntax{,}, @syntax{-}, @syntax{.}, @syntax{/}, @syntax{0} (zero), @syntax{B}, @syntax{CR}, @syntax{DB} or @syntax{Z}.  Numeric edited data items are not eligible to serve as table subscripts or source arguments on arithmetic statements.
@p @item @define{Numeric Literal}
@p A numeric constant.  @xref{Numeric Literals}.
@p @item @define{Page Footing}
@p A report group that appears at the bottom of every page of an RWCS-generated report.  Information typically found within such a report group might be:
@itemize @bullet
@p @item @define{The date the report was generated}
@p @item @define{The current page number of the report}
@end itemize
@item @define{Page Heading}
@p A report group that appears at the top of every page of an RWCS-generated report. Information typically found within such a report group might be:
@itemize @bullet
@p @item @define{A title for the report}
@p @item @define{The date the report was generated}
@p @item @define{The current page number of the report}
@p @item @define{Column headings describing the fields within the detail group(s)}
@end itemize
@item @define{Primary Entry-Point}
@p See entry-point.
@p @item @define{Procedure}
@p All executable code statements within a single procedure division paragraph or section.
@p @item @define{Procedure name}
@p A programmer-defined section or paragraph name in the procedure division assigned to a procedure.  Procedure names serve as a means by which a statement may refer to the statements that follow the procedure name.
@p @item @define{Program}
@p A GnuCOBOL main program or subprogram.
@p @item @define{Qualification}
@p The process of establishing a unique reference to a data item whose name is duplicated in a program.  This takes the form of using the duplicated data name and the name of any of its parent data items, connected by @syntax{OF} or @syntax{IN} such that the combination of those two data names is unique within the program.
@p @item @define{Record}
@p A group item that is not part of a higher-level group item.  @xref{Data Definition Principles}.  An elementary item with a level number of 01 can also be referred to as a record if it's definition occurs in the file section, provided that it's definition does not include the @syntax{CONSTANT} attribute.  @xref{FILE-SECTION-Data-Item}.
@p @item @define{Report Footing}
@p A report group that occurs only once in an RWCS-generated report --- as the very last presented report group of the report.  These typically serve as a visual indication that the report is finished.
@p @item @define{Report Group}
@p One or more consecutive lines on a report that serve a common informational purpose or function.  For example, lines of text that are displayed at the top or bottom of every printed page of a report.
@p @item @define{Report Heading}
@p A report group that occurs only once in an RWCS-generated report --- as the very first presented report group of the report.  These typically serve as an introduction to the report.
@p @item @define{Reserved Word}
@p A word coded in a GnuCOBOL program without any quote or apostrophe characters around it (which would have transformed that sequence of characters into a literal string) which has a very specific meaning to the compiler.  @xref{Language Reserved Words}, for a general discussion of the concept.  @xref{Appendix B - Reserved Word List}, for a complete list of GnuCOBOL reserved words.
@p @item @define{Sentence}
@p An arbitrarily long sequence of statements terminated by a period.
@p @item @define{Special Registers}
@p Special data items that are automatically defined for your use by the GnuCOBOL compiler.  @xref{Special Registers}, for a complete list.
@p @item @define{Statement}
@p A single executable COBOL instruction.  All statements start with a verb (@syntax{DISPLAY}, @syntax{IF}, @syntax{MOVE}, ...) which is followed by the operands and additional syntax elements that describe the actions to be performed.
@p @item @define{Static Subprogram}
@p A subprogram whose executable object code is part of the same executable file as its calling program.  Static subprograms are therefore loaded into memory at the same time as their caller.
@p @item @define{Subprogram}
@p A program invoked directly by another program in such a manner that it may return control back to the other program, directly back to the point where the subprogram was invoked.
@p @item @define{Subroutine}
@p A subprogram executed from another via a GnuCOBOL @syntaxref{CALL} statement (or the equivalent in whatever programming language that other program was written in).
@p @item @define{Summary Report}
@p An RWCS-generated report to which no detail groups are presented.
@p @item @define{User-Defined Function}
@p A subprogram written in GnuCOBOL that is executed in a syntactically-similar manner to that by which the various built-in intrinsic functions are executed.
@p @item @define{User-Defined Names}
@p Either the name of an identifier or a procedure in the program.  GnuCOBOL limits user-defined names to a maximum of 31 characters taken from the set of numeric digits, upper- and lower-case letters, hyphens and underscores.  A user-defined name may neither begin nor end with a hyphen or underscore.  User-defined names used as file names may additionally not begin with a digit although - unlike many other programming languages - user-defined names used as identifiers or procedure names may.
@p @item @define{Verb}
@p The first reserved word of a COBOL statement.
@p @item @define{Zero-Delimited Alphanumeric Literals}
@p An alphanumeric literal prefixed with an upper- or lower-case "Z" character --- for example, @syntax{Z'ABC'}.  These literals are one character longer than the value within apostrophes or quotes would make them appear.  The extra character (the last character) will be a null character (comprised entirely of zero bits).  These literals are ideal when defining or assigning values to alphanumeric data items that will be passed as arguments to a C subroutine.  @xref{Alphanumeric Literals}.
@end table
@iftex
@sp 3
@center ------------------------------------------------------------
@center End of Appendix A --- Glossary of Terms
@end iftex