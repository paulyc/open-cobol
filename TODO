GnuCOBOL TODO						-*- outline -*-

1 Pending requests

1.1 Handling of EBCDIC files

2 Other features to be implemented

2.1 Embedded SQL

Frank Polscheit posted his implementation of SQL preprocessor.
(2004-02-17: SQL pre-processor for OPEN-COBOL)

Firebird (firebird.sourceforge.net) has a SQL preprocessor
for their database.

2.2 New backends for INDEXED files

 - Look at C-ISAM replacements

3 Improvement of compiler internals

3.1 Error checking

3.1.1 Strict error checking depending on the standard
Partially implemented

3.1.2 Use `error' token in the parser for better error recovery

4 Optimization

4.1 More inlining of run-time functions

Done with various binary operands

5 Debugging support

5.1 Data access method

We should generate all data hierarchy defined in a COBOL program
with all relevant information, including data names, picture clauses,
and source locations.  We should also define a debugging function
that receives a data name and displays its value using the generated
data hierarchy.  By calling the function from gdb, we can easily
access the COBOL data at debugging time.

5.2 Animator:
* cobc: imply (minimal) -t listfile (use cob_temp_name, if needed) and read
  this file (skipping all non-source lines) instead of the original source
  file in codegen:
  * fixes (multiple) COPY (REPLACE) / REPLACING in the animator
  * fixes compilation from stdin
  if implied and save-temps is not used: unlink when finished
* for allowing animation of executables and better performance: pass
  the necessary function pointers libcob on module initialization
  instead of exporting these, provide a function in libcob to get these
  for a named program-id (=internal function lookup/module load without
  actual execution) and call this from gc-debugger
  --> remove error in cobc.c: -anim and -x not allowed
* for better support of external debugging tools: move breakpoint handling
  to libcob:
  * move COB_BREAKPOINT_FILE etc from debugger/breakpoints.cpy to libcob
  * provide a function in libcob to set / delete / pause a breakpoint
  * provide a function to get all breakpoints / breakpoints for program-id
* test/fix data display for multiple occurs and reference modification
* test/fix data display for LOCAL-STORAGE / BASED items
* test/fix data display for pointer, index, ...
* fix multiple / nested programs in one source
* (re-?)implement accept data
* (re-?)implement "skip to cursor line" (internal go to) and
  "go to cursor line" (temporary breakpoint)
* use computed-goto instead of a switch for 'reset cursor' when GCC is used
  (like we do in other places already)
* code cleanup
* gc-debugger.cob: needs a heavy performance optimization for the parts that
  are called even if no debugging is active (GO STATE)

6 Better user manual

Yes, we should
